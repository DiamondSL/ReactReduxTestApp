{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartItemsState = {\n  items: [{\n    title: 'Test Item 1',\n    quantity: 1,\n    total: 0,\n    price: 6\n  }, {\n    title: 'Test Item 2',\n    quantity: 0,\n    total: 0,\n    price: 3\n  }, {\n    title: 'Test Item 3',\n    quantity: 0,\n    total: 0,\n    price: 10\n  }]\n};\nconst CartItemsSlice = createSlice({\n  name: 'CartItems',\n  initialState: initialCartItemsState,\n  reducers: {\n    addItem(state, action) {\n      state.items = state.items.forEach(item => {\n        if (item.title == action.payload) {\n          const newArray = [state.items];\n          return state.items.item = item.title = item.title, item.price = item.price, item.quantity = item.quantity + 1, item.total = Number(item.price) * Number(item.quantity);\n        }\n      });\n    },\n\n    removeItem(state, action) {\n      state.items = state.items.forEach(item => {\n        if (item.title === action.payload) {\n          return item.quantity = item.quantity - 1, item.total = Number(item.total) - Number(item.price);\n        }\n      });\n    }\n\n  }\n});\nexport default CartItemsSlice;","map":{"version":3,"sources":["C:/work/udemy react/redux/reduxreact2/src/store/itemsCartState.js"],"names":["createSlice","initialCartItemsState","items","title","quantity","total","price","CartItemsSlice","name","initialState","reducers","addItem","state","action","forEach","item","payload","newArray","Number","removeItem"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,qBAAqB,GAAG;AAACC,EAAAA,KAAK,EAAG,CAAC;AAACC,IAAAA,KAAK,EAAE,aAAR;AAAuBC,IAAAA,QAAQ,EAAE,CAAjC;AAAoCC,IAAAA,KAAK,EAAE,CAA3C;AAA8CC,IAAAA,KAAK,EAAE;AAArD,GAAD,EAA0D;AAACH,IAAAA,KAAK,EAAE,aAAR;AAAuBC,IAAAA,QAAQ,EAAE,CAAjC;AAAoCC,IAAAA,KAAK,EAAE,CAA3C;AAA8CC,IAAAA,KAAK,EAAE;AAArD,GAA1D,EAAmH;AAACH,IAAAA,KAAK,EAAE,aAAR;AAAuBC,IAAAA,QAAQ,EAAE,CAAjC;AAAoCC,IAAAA,KAAK,EAAE,CAA3C;AAA8CC,IAAAA,KAAK,EAAE;AAArD,GAAnH;AAAT,CAA9B;AAGA,MAAMC,cAAc,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,WADyB;AAE/BC,EAAAA,YAAY,EAAER,qBAFiB;AAG/BS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAACD,MAAAA,KAAK,CAACV,KAAN,GAAcU,KAAK,CAACV,KAAN,CAAYY,OAAZ,CAAoBC,IAAI,IAAI;AAC9D,YAAGA,IAAI,CAACZ,KAAL,IAAcU,MAAM,CAACG,OAAxB,EACA;AACA,gBAAMC,QAAQ,GAAG,CAACL,KAAK,CAACV,KAAP,CAAjB;AACA,iBACAU,KAAK,CAACV,KAAN,CAAYa,IAAZ,GACAA,IAAI,CAACZ,KAAL,GAAaY,IAAI,CAACZ,KADlB,EAEAY,IAAI,CAACT,KAAL,GAAaS,IAAI,CAACT,KAFlB,EAGAS,IAAI,CAACX,QAAL,GAAgBW,IAAI,CAACX,QAAL,GAAgB,CAHhC,EAIAW,IAAI,CAACV,KAAL,GAAaa,MAAM,CAACH,IAAI,CAACT,KAAN,CAAN,GAAqBY,MAAM,CAACH,IAAI,CAACX,QAAN,CALxC;AAOH;AACJ,OAZyC,CAAd;AAa/B,KAda;;AAeNe,IAAAA,UAAU,CAACP,KAAD,EAAQC,MAAR,EAAgB;AAACD,MAAAA,KAAK,CAACV,KAAN,GAAcU,KAAK,CAACV,KAAN,CAAYY,OAAZ,CAAoBC,IAAI,IAAI;AAAC,YAAGA,IAAI,CAACZ,KAAL,KAAeU,MAAM,CAACG,OAAzB,EAAiC;AAAE,iBAAQD,IAAI,CAACX,QAAL,GAAgBW,IAAI,CAACX,QAAL,GAAgB,CAAhC,EAAmCW,IAAI,CAACV,KAAL,GAAaa,MAAM,CAACH,IAAI,CAACV,KAAN,CAAN,GAAqBa,MAAM,CAACH,IAAI,CAACT,KAAN,CAAnF;AAAiG;AAAC,OAAlK,CAAd;AAAkL;;AAfvM;AAHqB,CAAD,CAAlC;AAuBA,eAAeC,cAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCartItemsState = {items : [{title: 'Test Item 1', quantity: 1, total: 0, price: 6}, {title: 'Test Item 2', quantity: 0, total: 0, price: 3}, {title: 'Test Item 3', quantity: 0, total: 0, price: 10} ] };\r\n\r\n\r\nconst CartItemsSlice = createSlice({\r\n    name: 'CartItems',\r\n    initialState: initialCartItemsState,\r\n    reducers: {\r\n        addItem(state, action) {state.items = state.items.forEach(item => {\r\n            if(item.title == action.payload)\r\n            {\r\n            const newArray = [state.items]\r\n            return (\r\n            state.items.item = \r\n            item.title = item.title,\r\n            item.price = item.price,\r\n            item.quantity = item.quantity + 1, \r\n            item.total = Number(item.price) * Number(item.quantity)\r\n            )\r\n        }\r\n    })\r\n},\r\n        removeItem(state, action) {state.items = state.items.forEach(item => {if(item.title === action.payload){ return (item.quantity = item.quantity - 1, item.total = Number(item.total) - Number(item.price))}})},\r\n    }\r\n\r\n})\r\n\r\nexport default CartItemsSlice;"]},"metadata":{},"sourceType":"module"}