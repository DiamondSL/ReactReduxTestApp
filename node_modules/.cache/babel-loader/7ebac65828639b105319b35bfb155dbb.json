{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartItemsState = {\n  items: [{\n    title: 'Test Item 1',\n    quantity: 1,\n    total: 0,\n    price: 6\n  }, {\n    title: 'Test Item 2',\n    quantity: 0,\n    total: 0,\n    price: 3\n  }, {\n    title: 'Test Item 3',\n    quantity: 0,\n    total: 0,\n    price: 10\n  }]\n};\nconst CartItemsSlice = createSlice({\n  name: 'CartItems',\n  initialState: initialCartItemsState,\n  reducers: {\n    addNewProduct(state, action) {\n      let newArray = [...state.items];\n    },\n\n    addItem(state, action) {\n      let newArray = [...state.items];\n      let findItem; //looking for item that we currently need through comparing title that we passed through payload and item title\n      //then we take current item index to work with this element\n      //i could add id to every item to make my work easier\n      //but it's also was made to show some another way of doing it\n\n      state.items.forEach((item, index) => {\n        if (item.title == action.payload) {\n          findItem = index;\n          newArray[index].quantity = item.quantity + 1;\n          newArray[index].total = Number(item.price) * Number(item.quantity);\n          console.log(newArray[index]);\n        }\n\n        return state.items = newArray;\n      });\n    },\n\n    removeItem(state, action) {\n      let newArray = [...state.items];\n      let findItem;\n      state.items.forEach((item, index) => {\n        if (item.title == action.payload) {\n          findItem = index;\n\n          if (item.quantity != 0) {\n            //this if/else statement used to prevent negative values \n            newArray[index].quantity = item.quantity - 1;\n            newArray[index].total = newArray[index].total - newArray[index].price;\n            console.log(newArray[index]);\n          } else {\n            return;\n          }\n        }\n\n        return state.items = newArray;\n      });\n    }\n\n  }\n});\nexport default CartItemsSlice;","map":{"version":3,"sources":["C:/work/udemy react/redux/reduxreact2/src/store/itemsCartState.js"],"names":["createSlice","initialCartItemsState","items","title","quantity","total","price","CartItemsSlice","name","initialState","reducers","addNewProduct","state","action","newArray","addItem","findItem","forEach","item","index","payload","Number","console","log","removeItem"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCartItemsState = {items : [{title: 'Test Item 1', quantity: 1, total: 0, price: 6}, {title: 'Test Item 2', quantity: 0, total: 0, price: 3}, {title: 'Test Item 3', quantity: 0, total: 0, price: 10} ] };\r\n\r\n\r\nconst CartItemsSlice = createSlice({\r\n    name: 'CartItems',\r\n    initialState: initialCartItemsState,\r\n    reducers: {\r\n        addNewProduct(state, action){\r\n            let newArray = [...state.items];\r\n            \r\n        },\r\n        addItem(state, action) {\r\n            let newArray = [...state.items];\r\n            let findItem;\r\n\r\n             //looking for item that we currently need through comparing title that we passed through payload and item title\r\n            //then we take current item index to work with this element\r\n            //i could add id to every item to make my work easier\r\n            //but it's also was made to show some another way of doing it\r\n\r\n            state.items.forEach((item, index) => {\r\n            if(item.title == action.payload)\r\n            {\r\n                findItem = index;\r\n                newArray[index].quantity = item.quantity + 1;\r\n                newArray[index].total = Number(item.price) * Number(item.quantity);\r\n                console.log(newArray[index]);\r\n            }\r\n\r\n            return (\r\n            state.items = newArray\r\n            )\r\n    })\r\n},\r\n        removeItem(state, action) { let newArray = [...state.items];\r\n            let findItem;\r\n\r\n            state.items.forEach((item, index) => {\r\n            if(item.title == action.payload)\r\n            {\r\n                findItem = index;\r\n                if(item.quantity != 0){\r\n                    //this if/else statement used to prevent negative values \r\n                newArray[index].quantity = item.quantity - 1;\r\n                newArray[index].total = newArray[index].total - newArray[index].price;\r\n                console.log(newArray[index]);\r\n                }\r\n                else {\r\n                    return\r\n                }\r\n            }\r\n\r\n            return (\r\n            state.items = newArray\r\n            )\r\n    })},\r\n    }\r\n\r\n})\r\n\r\nexport default CartItemsSlice;"]},"metadata":{},"sourceType":"module"}