{"ast":null,"code":"import _toConsumableArray from\"C:\\\\work\\\\udemy react\\\\redux\\\\reduxreact2\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import{createSlice}from\"@reduxjs/toolkit\";var initialCartItemsState={items:[{title:'Test Item 1',quantity:1,total:6,price:6},{title:'Test Item 2',quantity:0,total:0,price:10}]};var CartItemsSlice=createSlice({name:'CartItems',initialState:initialCartItemsState,reducers:{addNewProduct:function addNewProduct(state,action){var newArray=_toConsumableArray(state.items);newArray.push(action.payload);state.items=newArray;},addItem:function addItem(state,action){var newArray=_toConsumableArray(state.items);var findItem;//looking for item that we currently need through comparing title that we passed through payload and item title\n//then we take current item index to work with this element\n//i could add id to every item to make my work easier\n//but it's also was made to show some another way of doing it\nstate.items.forEach(function(item,index){if(item.title==action.payload){findItem=index;newArray[index].quantity=item.quantity+1;newArray[index].total=Number(item.price)*Number(item.quantity);console.log(newArray[index]);}return state.items=newArray;});},removeItem:function removeItem(state,action){var newArray=_toConsumableArray(state.items);var findItem;state.items.forEach(function(item,index){if(item.title==action.payload){findItem=index;if(item.quantity!=0){//this if/else statement used to prevent negative values \nnewArray[index].quantity=item.quantity-1;newArray[index].total=newArray[index].total-newArray[index].price;console.log(newArray[index]);}else{return;}}return state.items=newArray;});}}});export default CartItemsSlice;","map":{"version":3,"sources":["C:/work/udemy react/redux/reduxreact2/src/store/itemsCartState.js"],"names":["createSlice","initialCartItemsState","items","title","quantity","total","price","CartItemsSlice","name","initialState","reducers","addNewProduct","state","action","newArray","push","payload","addItem","findItem","forEach","item","index","Number","console","log","removeItem"],"mappings":"6IAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,CAACC,KAAK,CAAG,CAAC,CAACC,KAAK,CAAE,aAAR,CAAuBC,QAAQ,CAAE,CAAjC,CAAoCC,KAAK,CAAE,CAA3C,CAA8CC,KAAK,CAAE,CAArD,CAAD,CAA0D,CAACH,KAAK,CAAE,aAAR,CAAuBC,QAAQ,CAAE,CAAjC,CAAoCC,KAAK,CAAE,CAA3C,CAA8CC,KAAK,CAAE,EAArD,CAA1D,CAAT,CAA9B,CAGA,GAAMC,CAAAA,cAAc,CAAGP,WAAW,CAAC,CAC/BQ,IAAI,CAAE,WADyB,CAE/BC,YAAY,CAAER,qBAFiB,CAG/BS,QAAQ,CAAE,CACNC,aADM,wBACQC,KADR,CACeC,MADf,CACsB,CACxB,GAAIC,CAAAA,QAAQ,oBAAOF,KAAK,CAACV,KAAb,CAAZ,CACAY,QAAQ,CAACC,IAAT,CAAcF,MAAM,CAACG,OAArB,EACAJ,KAAK,CAACV,KAAN,CAAcY,QAAd,CACH,CALK,CAMNG,OANM,kBAMEL,KANF,CAMSC,MANT,CAMiB,CACnB,GAAIC,CAAAA,QAAQ,oBAAOF,KAAK,CAACV,KAAb,CAAZ,CACA,GAAIgB,CAAAA,QAAJ,CAEC;AACD;AACA;AACA;AAEAN,KAAK,CAACV,KAAN,CAAYiB,OAAZ,CAAoB,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACrC,GAAGD,IAAI,CAACjB,KAAL,EAAcU,MAAM,CAACG,OAAxB,CACA,CACIE,QAAQ,CAAGG,KAAX,CACAP,QAAQ,CAACO,KAAD,CAAR,CAAgBjB,QAAhB,CAA2BgB,IAAI,CAAChB,QAAL,CAAgB,CAA3C,CACAU,QAAQ,CAACO,KAAD,CAAR,CAAgBhB,KAAhB,CAAwBiB,MAAM,CAACF,IAAI,CAACd,KAAN,CAAN,CAAqBgB,MAAM,CAACF,IAAI,CAAChB,QAAN,CAAnD,CACAmB,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACO,KAAD,CAApB,EACH,CAED,MACAT,CAAAA,KAAK,CAACV,KAAN,CAAcY,QADd,CAGP,CAZO,EAaX,CA5Ba,CA6BNW,UA7BM,qBA6BKb,KA7BL,CA6BYC,MA7BZ,CA6BoB,CAAE,GAAIC,CAAAA,QAAQ,oBAAOF,KAAK,CAACV,KAAb,CAAZ,CACxB,GAAIgB,CAAAA,QAAJ,CAEAN,KAAK,CAACV,KAAN,CAAYiB,OAAZ,CAAoB,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACrC,GAAGD,IAAI,CAACjB,KAAL,EAAcU,MAAM,CAACG,OAAxB,CACA,CACIE,QAAQ,CAAGG,KAAX,CACA,GAAGD,IAAI,CAAChB,QAAL,EAAiB,CAApB,CAAsB,CAClB;AACJU,QAAQ,CAACO,KAAD,CAAR,CAAgBjB,QAAhB,CAA2BgB,IAAI,CAAChB,QAAL,CAAgB,CAA3C,CACAU,QAAQ,CAACO,KAAD,CAAR,CAAgBhB,KAAhB,CAAwBS,QAAQ,CAACO,KAAD,CAAR,CAAgBhB,KAAhB,CAAwBS,QAAQ,CAACO,KAAD,CAAR,CAAgBf,KAAhE,CACAiB,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACO,KAAD,CAApB,EACC,CALD,IAMK,CACD,OACH,CACJ,CAED,MACAT,CAAAA,KAAK,CAACV,KAAN,CAAcY,QADd,CAGP,CAlBO,EAkBL,CAlDO,CAHqB,CAAD,CAAlC,CA0DA,cAAeP,CAAAA,cAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCartItemsState = {items : [{title: 'Test Item 1', quantity: 1, total: 6, price: 6}, {title: 'Test Item 2', quantity: 0, total: 0, price: 10} ] };\r\n\r\n\r\nconst CartItemsSlice = createSlice({\r\n    name: 'CartItems',\r\n    initialState: initialCartItemsState,\r\n    reducers: {\r\n        addNewProduct(state, action){\r\n            let newArray = [...state.items];\r\n            newArray.push(action.payload);\r\n            state.items = newArray;\r\n        },\r\n        addItem(state, action) {\r\n            let newArray = [...state.items];\r\n            let findItem;\r\n\r\n             //looking for item that we currently need through comparing title that we passed through payload and item title\r\n            //then we take current item index to work with this element\r\n            //i could add id to every item to make my work easier\r\n            //but it's also was made to show some another way of doing it\r\n\r\n            state.items.forEach((item, index) => {\r\n            if(item.title == action.payload)\r\n            {\r\n                findItem = index;\r\n                newArray[index].quantity = item.quantity + 1;\r\n                newArray[index].total = Number(item.price) * Number(item.quantity);\r\n                console.log(newArray[index]);\r\n            }\r\n\r\n            return (\r\n            state.items = newArray\r\n            )\r\n    })\r\n},\r\n        removeItem(state, action) { let newArray = [...state.items];\r\n            let findItem;\r\n\r\n            state.items.forEach((item, index) => {\r\n            if(item.title == action.payload)\r\n            {\r\n                findItem = index;\r\n                if(item.quantity != 0){\r\n                    //this if/else statement used to prevent negative values \r\n                newArray[index].quantity = item.quantity - 1;\r\n                newArray[index].total = newArray[index].total - newArray[index].price;\r\n                console.log(newArray[index]);\r\n                }\r\n                else {\r\n                    return\r\n                }\r\n            }\r\n\r\n            return (\r\n            state.items = newArray\r\n            )\r\n    })},\r\n    }\r\n\r\n})\r\n\r\nexport default CartItemsSlice;"]},"metadata":{},"sourceType":"module"}